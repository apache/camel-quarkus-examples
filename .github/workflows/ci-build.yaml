#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Camel Quarkus CI

on:
  push:
    branches:
      - main
      - camel-quarkus-main
    paths-ignore:
      - '**.adoc'
      - 'Jenkinsfile'
      - 'KEYS'
      - 'LICENSE.txt'
      - 'NOTICE.txt'
  pull_request:
    branches:
      - main
      - camel-quarkus-main
    paths-ignore:
      - '**.adoc'
      - 'Jenkinsfile'
      - 'KEYS'
      - 'LICENSE.txt'
      - 'NOTICE.txt'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  LANG: en_US.UTF-8
  MAVEN_OPTS: -Xmx3000m
  MAVEN_ARGS: -V -ntp -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -e
  TESTCONTAINERS_RYUK_DISABLED: true

jobs:
  initial-mvn-install:
    if: github.repository == 'apache/camel-quarkus-examples'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-itest-matrix.outputs.matrix }}
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Camel Quarkus
        if: github.ref == 'refs/heads/camel-quarkus-main' || github.base_ref == 'camel-quarkus-main'
        run: |
          git clone --depth 1 --branch main https://github.com/apache/camel-quarkus.git ${{ runner.temp }}/camel-quarkus \
            && cd ${{ runner.temp }}/camel-quarkus \
            && echo "Current Camel Quarkus commit:" $(git rev-parse HEAD) \
            && ./mvnw ${MAVEN_ARGS} clean install -Dquickly
      - name: mvn cq:examples-check-platform
        run: mvn org.l2x6.cq:cq-maven-plugin:2.10.0:examples-check-platform
      - name: mvn ${MAVEN_ARGS} license:check formatter:validate impsort:check
        run: |
          ./mvnw-for-each.sh ${MAVEN_ARGS} \
            license:check \
            net.revelc.code.formatter:formatter-maven-plugin:validate \
            net.revelc.code:impsort-maven-plugin:check
      - name: Validate test categories YAML
        run: |
          VALID=true
          for EXAMPLE in $(dirname $(grep -l "camel-quarkus-examples-" $(find . -name pom.xml)) | cut -f2 -d'/'); do
            if ! grep ${EXAMPLE} .github/test-categories.yaml > /dev/null; then
              echo "Project ${EXAMPLE} is not listed in .github/test-categories.yaml"
              VALID=false
            fi
          done

          if [[ ${VALID} != "true" ]]; then
            exit 1
          fi
      - name: Build Camel Quarkus Examples
        run: |
          ./mvnw-for-each.sh ${MAVEN_ARGS} clean install -DskipTests -Dquarkus.build.skip
      - name: Fail if there are uncommitted changes
        shell: bash
        run: |
          [[ -z $(git status --porcelain) ]] || { echo 'There are uncommitted changes'; git status; exit 1; }
      - name: Tar Maven Repo
        shell: bash
        run: |
          tar -czf ${{ runner.temp }}/maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v2
        with:
          name: maven-repo
          path: ${{ runner.temp }}/maven-repo.tgz
          retention-days: 1
      - name: Setup Integration Test Matrix
        id: set-itest-matrix
        run: |
          CATEGORIES=$(yq -M -N -I 0 -o=json e 'keys' .github/test-categories.yaml | tr '"' "'")
          echo "::set-output name=matrix::{'category': ${CATEGORIES}}"

  integration-tests:
    name: Integration Tests - ${{matrix.category}}
    needs: initial-mvn-install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.initial-mvn-install.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Download Maven Repo
        uses: actions/download-artifact@v2
        with:
          name: maven-repo
          path: ..
      - name: Extract Maven Repo
        shell: bash
        run: |
          tar -xzf ../maven-repo.tgz -C ~
      - name: Integration Tests
        run: |
          EXAMPLE_PROJECTS=""
          for EXAMPLE in $(yq -M -N e ".${{ matrix.category }}" .github/test-categories.yaml | cut -f2 -d' '); do
            if [ "${EXAMPLE}" == "null" ]; then
              continue
            fi

            ./mvnw ${MAVEN_ARGS} clean verify \
              -Dformatter.skip -Dimpsort.skip \
              -Pnative,docker \
              -f "${EXAMPLE}/pom.xml"
          done
      - name: Fail if there are uncommitted changes
        shell: bash
        run: |
          [[ -z $(git status --porcelain) ]] || { echo 'There are uncommitted changes'; git status; exit 1; }

  integration-tests-alternative-platform:
    name: Integration Tests Alternative Platform - ${{matrix.os}}
    needs: initial-mvn-install
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Download Maven Repo
        uses: actions/download-artifact@v2
        with:
          name: maven-repo
          path: ..
      - name: Extract Maven Repo
        shell: bash
        run: |
          tar -xzf ../maven-repo.tgz -C ~
      - name: Integration Tests
        shell: bash
        run: |
          ./mvnw-for-each.sh ${MAVEN_ARGS} -Dskip-testcontainers-tests clean verify 
      - name: Fail if there are uncommitted changes
        shell: bash
        run: |
          [[ -z $(git status --porcelain) ]] || { echo 'There are uncommitted changes'; git status; exit 1; }
